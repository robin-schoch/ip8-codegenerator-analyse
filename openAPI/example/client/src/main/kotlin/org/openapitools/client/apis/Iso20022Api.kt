/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import org.openapitools.client.models.CommonErrorResponse

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class Iso20022Api(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(baseUrl, httpClientEngine, httpClientConfig, jsonBlock) {

        /**
        * Submit ISO20022 XML payment instruction (PAIN.001)
        * Submit an XML PAIN.001 payment instruction according to the ISO20022 specification.
         * @param authorization Bearer followed by a base64 encoded OAuth access token 
         * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
         * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
         * @param userAgent Name and version of the of the Client software. 
         * @param body The XML PAIN.001. 
         * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
         * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
         * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
         * @return void
        */
        open suspend fun iso20022PaymentsPost(authorization: kotlin.String, xCorAPIClientID: kotlin.String, xCorrelationID: kotlin.String, userAgent: kotlin.String, body: kotlin.String, xCorAPITargetID: kotlin.String?, xPSUIPAddress: kotlin.String?, xPSUUserAgent: kotlin.String?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OAuth2")

            val localVariableBody = body

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
            xCorAPIClientID?.apply { localVariableHeaders["X-CorAPI-Client-ID"] = this.toString() }
            xCorrelationID?.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xCorAPITargetID?.apply { localVariableHeaders["X-CorAPI-Target-ID"] = this.toString() }
            xPSUIPAddress?.apply { localVariableHeaders["X-PSU-IP-Address"] = this.toString() }
            xPSUUserAgent?.apply { localVariableHeaders["X-PSU-User-Agent"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/iso20022/payments",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a submitted ISO20022 XML PAIN.001 message before execution
        * 
         * @param submissionID ID of payment submission to be retrieved. 
         * @param authorization Bearer followed by a base64 encoded OAuth access token 
         * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
         * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
         * @param userAgent Name and version of the of the Client software. 
         * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
         * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
         * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
         * @return void
        */
        open suspend fun iso20022PaymentsSubmissionIdDelete(submissionID: kotlin.String, authorization: kotlin.String, xCorAPIClientID: kotlin.String, xCorrelationID: kotlin.String, userAgent: kotlin.String, xCorAPITargetID: kotlin.String?, xPSUIPAddress: kotlin.String?, xPSUUserAgent: kotlin.String?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OAuth2")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
            xCorAPIClientID?.apply { localVariableHeaders["X-CorAPI-Client-ID"] = this.toString() }
            xCorrelationID?.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xCorAPITargetID?.apply { localVariableHeaders["X-CorAPI-Target-ID"] = this.toString() }
            xPSUIPAddress?.apply { localVariableHeaders["X-PSU-IP-Address"] = this.toString() }
            xPSUUserAgent?.apply { localVariableHeaders["X-PSU-User-Agent"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/iso20022/payments/{submissionId}".replace("{" + "Submission ID" + "}", "$submissionID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Retrieve a submitted ISO20022 XML PAIN.001 message
        * 
         * @param submissionID ID of payment submission to be retrieved. 
         * @param authorization Bearer followed by a base64 encoded OAuth access token 
         * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
         * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
         * @param userAgent Name and version of the of the Client software. 
         * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
         * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
         * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun iso20022PaymentsSubmissionIdGet(submissionID: kotlin.String, authorization: kotlin.String, xCorAPIClientID: kotlin.String, xCorrelationID: kotlin.String, userAgent: kotlin.String, xCorAPITargetID: kotlin.String?, xPSUIPAddress: kotlin.String?, xPSUUserAgent: kotlin.String?): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("OAuth2")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
            xCorAPIClientID?.apply { localVariableHeaders["X-CorAPI-Client-ID"] = this.toString() }
            xCorrelationID?.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xCorAPITargetID?.apply { localVariableHeaders["X-CorAPI-Target-ID"] = this.toString() }
            xPSUIPAddress?.apply { localVariableHeaders["X-PSU-IP-Address"] = this.toString() }
            xPSUUserAgent?.apply { localVariableHeaders["X-PSU-User-Agent"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/iso20022/payments/{submissionId}".replace("{" + "Submission ID" + "}", "$submissionID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get the ISO20022 XML status report (PAIN.002) for a specific payment instruction
        * The status report for the requested XML ISO20022 payment instruction (PAIN.002).
         * @param submissionID ID of payment submission to be retrieved. 
         * @param authorization Bearer followed by a base64 encoded OAuth access token 
         * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
         * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
         * @param userAgent Name and version of the of the Client software. 
         * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
         * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
         * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun iso20022PaymentsSubmissionIdStatusGet(submissionID: kotlin.String, authorization: kotlin.String, xCorAPIClientID: kotlin.String, xCorrelationID: kotlin.String, userAgent: kotlin.String, xCorAPITargetID: kotlin.String?, xPSUIPAddress: kotlin.String?, xPSUUserAgent: kotlin.String?): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>("OAuth2")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            authorization?.apply { localVariableHeaders["Authorization"] = this.toString() }
            xCorAPIClientID?.apply { localVariableHeaders["X-CorAPI-Client-ID"] = this.toString() }
            xCorrelationID?.apply { localVariableHeaders["X-Correlation-ID"] = this.toString() }
            userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
            xCorAPITargetID?.apply { localVariableHeaders["X-CorAPI-Target-ID"] = this.toString() }
            xPSUIPAddress?.apply { localVariableHeaders["X-PSU-IP-Address"] = this.toString() }
            xPSUUserAgent?.apply { localVariableHeaders["X-PSU-User-Agent"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/iso20022/payments/{submissionId}/status".replace("{" + "Submission ID" + "}", "$submissionID"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
