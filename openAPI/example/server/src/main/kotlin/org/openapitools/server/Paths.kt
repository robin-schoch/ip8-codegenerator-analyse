/**
* Common Payment API
* This specification defines a simple payment API for payment types used in Switzerland.  The API is supposed to be used by customers who want to initiate a payment at their bank.  Note that, consents and SCA will be handled in a dedicated specification file. This specification uses schema definitions from the Common Data Model v1.2.1. 
*
* The version of the OpenAPI document: 1.3.0
* Contact: info@common-api.ch
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server

import io.ktor.locations.*
import org.openapitools.server.models.*

@KtorExperimentalLocationsAPI
object Paths {
    /**
     * Submit ISO20022 XML payment instruction (PAIN.001)
     * Submit an XML PAIN.001 payment instruction according to the ISO20022 specification.
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param body The XML PAIN.001. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/iso20022/payments") class iso20022PaymentsPost(val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val body: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Delete a submitted ISO20022 XML PAIN.001 message before execution
     * 
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/iso20022/payments/{submissionId}") class iso20022PaymentsSubmissionIdDelete(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Retrieve a submitted ISO20022 XML PAIN.001 message
     * 
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/iso20022/payments/{submissionId}") class iso20022PaymentsSubmissionIdGet(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Get the ISO20022 XML status report (PAIN.002) for a specific payment instruction
     * The status report for the requested XML ISO20022 payment instruction (PAIN.002).
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/iso20022/payments/{submissionId}/status") class iso20022PaymentsSubmissionIdStatusGet(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Get the list of all payments.
     * Return the list of all payments for the authenticated context.
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/payments") class paymentsGet(val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Initiate new payments submission
     * Create new payments submission.
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param paymentSubmissionRequest Details of payments submission to be added. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/payments") class paymentsPost(val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val paymentSubmissionRequest: PaymentSubmissionRequest, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Delete a specific payment submission before executed
     * Delete a specific payment submission before executed.
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/payments/{submissionId}") class paymentsSubmissionIdDelete(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Get a specific payment submission
     * Retrieve a specific payment submission.
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/payments/{submissionId}") class paymentsSubmissionIdGet(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Get status information for the specific payment submission
     * Retrieve a specific payment submission&#39;s status.
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/payments/{submissionId}/status") class paymentsSubmissionIdStatusGet(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Get the list of all payments (all payment types)
     * Return the list of all initiated payments of all types for the authenticated context.
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param entryReferenceFrom Get all objects after the one with the given ID. (optional)
     * @param limit Number of items to be returned. (optional)
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/single-payments") class singlePaymentsGet(val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val entryReferenceFrom: kotlin.String? = null, val limit: kotlin.Int? = null, val dateFrom: java.time.LocalDate? = null, val dateTo: java.time.LocalDate? = null, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Initiate new single payments submission
     * Create new single payments submission.
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param singlepaymentsSubmissionRequest Details of single payments submission to be added. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/single-payments") class singlePaymentsPost(val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val singlepaymentsSubmissionRequest: SinglepaymentsSubmissionRequest, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Delete a single payment
     * Delete single payment with corresponding submissionId.
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/single-payments/{submissionId}") class singlePaymentsSubmissionIdDelete(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Get a specific payment
     * Receive payment with corresponding submissionId.
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/single-payments/{submissionId}") class singlePaymentsSubmissionIdGet(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Get status information for the specific single payment
     * Retrieve a specific single payment submission&#39;s status.
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/single-payments/{submissionId}/status") class singlePaymentsSubmissionIdStatusGet(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Get the list of all standing orders.
     * Return the list of all standing orders for the authenticated context.
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/standing-orders") class standingOrdersGet(val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Create a new Standing Order
     * It is used to create a permanent order for the transfer of funds.
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param standingorderSubmissionRequest Details of standing orders submission to be added. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/standing-orders") class standingOrdersPost(val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val standingorderSubmissionRequest: StandingorderSubmissionRequest, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Delete a specific standing order submission
     * Delete a specific standing order submission.
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/standing-orders/{submissionId}") class standingOrdersSubmissionIdDelete(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Get a specific standing order submission
     * Retrieve a specific standing order submission.
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/standing-orders/{submissionId}") class standingOrdersSubmissionIdGet(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

    /**
     * Get status information for the specific standing order submission
     * Retrieve a specific standing order submission&#39;s status.
     * @param submissionID ID of payment submission to be retrieved. 
     * @param authorization Bearer followed by a base64 encoded OAuth access token 
     * @param xCorAPIClientID ID of the client forwarded to the provider. (SCOPE: FI) 
     * @param xCorrelationID Unique ID (defined by the caller) which will be reflected back in the response. 
     * @param userAgent Name and version of the of the Client software. 
     * @param xCorAPITargetID ID of the target, e.g., a financial institution. (SCOPE: FI - optional) (optional)
     * @param xPSUIPAddress IP address of the user initiating the operation (SCOPE: FI - optional) (optional)
     * @param xPSUUserAgent User of the client software (SCOPE: FI - optional) (optional)
     */
    @Location("/standing-orders/{submissionId}/status") class standingOrdersSubmissionIdStatusGet(val submissionID: kotlin.String, val authorization: kotlin.String, val xCorAPIClientID: kotlin.String, val xCorrelationID: kotlin.String, val userAgent: kotlin.String, val xCorAPITargetID: kotlin.String? = null, val xPSUIPAddress: kotlin.String? = null, val xPSUUserAgent: kotlin.String? = null)

}
