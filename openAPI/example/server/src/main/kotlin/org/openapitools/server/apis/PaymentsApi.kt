/**
 * Common Payment API
 * This specification defines a simple payment API for payment types used in Switzerland.  The API is supposed to be used by customers who want to initiate a payment at their bank.  Note that, consents and SCA will be handled in a dedicated specification file. This specification uses schema definitions from the Common Data Model v1.2.1.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: info@common-api.ch
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.application.*
import io.ktor.auth.*
import io.ktor.http.*
import io.ktor.response.*
import org.openapitools.server.Paths
import io.ktor.locations.*
import io.ktor.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.CommonErrorResponse
import org.openapitools.server.models.PaymentSubmissionRequest
import org.openapitools.server.models.PaymentSubmissionStatus
import org.openapitools.server.models.PaymentsGet200Response

@KtorExperimentalLocationsAPI
fun Route.PaymentsApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("OAuth2") {
        get<Paths.paymentsSubmissionIdStatusGet> {
            val principal = call.authentication.principal<OAuthAccessTokenResponse>()!!
            val exampleContentType = "application/json"
            val exampleContentString = """{
                ...
            }"""
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        }
    }
}