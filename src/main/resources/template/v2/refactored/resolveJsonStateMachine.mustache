using System;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Swissframe.Thermos.Common.Contract;
using Swissframe.Thermos.Control.Contract.HeatPump;
using Swissframe.Thermos.Hardware.Contract;

namespace Swissframe.Util.StateEventEditor.Common.Test
{

    public class {{name}}
    {
    {{#statesDefinition}}
        private const string {{.}} = nameof({{.}});
    {{/statesDefinition}}

        private readonly IServiceProvider _serviceProvider;
        private readonly Registry _registry;
        private readonly ILogger _logger;

        private string _currentState = {{initialState}};

        public {{name}}(IServiceProvider serviceProvider, Registry registry, ILogger logger)
        {
            _serviceProvider = serviceProvider;
            _registry = registry;
            _logger = logger;
        }

        public void UpdateState()
        {
            var nextState = _currentState switch
            {
            {{#statesDefinition}}
                {{.}} => {{.}}State(),
            {{/statesDefinition}}
                _ => throw new ArgumentOutOfRangeException()
            };

            if (nextState != _currentState)
            {
                _logger.LogInformation("perform transition from {source} to {target}", _currentState, nextState);
            }
            _currentState = nextState;
        }

    {{#stateTransition}}
        private string {{stateName}}State()
        {
{{{defaultInvocation}}}

        {{#transitions}}
            {{#.}}
                {{{.}}}
            {{/.}}
        {{/transitions}}

            return {{stateName}};
        }

    {{/stateTransition}}


{{#events}}
    {{#.}}
        {{{.}}}
    {{/.}}
{{/events}}
    }
}