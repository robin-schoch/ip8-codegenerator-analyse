using System;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Swissframe.Thermos.Common.Contract;
using Swissframe.Thermos.Control.Contract.HeatPump;
using Swissframe.Thermos.Hardware.Contract;

namespace Swissframe.Util.StateEventEditor.Common.Test
{

    public class {{name}}
    {
    {{#states}}
        private const string {{name}} = nameOf({{name}});
    {{/states}}

        private readonly IServiceProvider _serviceProvider;
        private readonly Registry _registry;
        private readonly ILogger _logger;

        private string _currentState = {{initialState.name}};

        public {{name}}(IServiceProvider serviceProvider, Registry registry, ILogger logger)
        {
            _serviceProvider = serviceProvider;
            _registry = registry;
            _logger = logger;
        }

        public void UpdateState()
        {
            var nextState = _currentState switch
            {
            {{#states}}
                {{name}} => {{name}}State();
            {{/states}}
                _ => throw new ArgumentOutOfRangeException()
            };

            if (nextState != _currentState)
            {
                _logger.LogInformation("perform transition from {source} to {target}", _currentState, nextState);
            }
            _currentState = nextState;
        }

    {{#states}}
        private string {{name}}State()
        {
            {{{stateTransition}}}

    {{#transitions}}
        {{#.}}
            {{{.}}}
        {{/.}}

    {{/transitions}}

            return {{name}};
        }
    {{/states}}

{{#events}}
    {{#definition}}
        {{{.}}}
    {{/definition}}

{{/events}}
    }
}