"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=c(n),d=a,g=s["".concat(p,".").concat(d)]||s[d]||m[d]||i;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1914:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_label:"Spring State Machine",title:"Spring State Machine",sidebar_position:1},l="Spring State Machine",o={unversionedId:"generic/spring-state-machine",id:"generic/spring-state-machine",title:"Spring State Machine",description:"This section explains how to generate source code for the spring state machine framework and how to use it for a",source:"@site/docs/generic/spring-state-machine.md",sourceDirName:"generic",slug:"/generic/spring-state-machine",permalink:"/generic/spring-state-machine",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/generic/spring-state-machine.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Spring State Machine",title:"Spring State Machine",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Generic Generator",permalink:"/category/generic-generator"},next:{title:"Tinder StateMachine",permalink:"/generic/tinder-state-machine"}},p={},c=[{value:"Run with Gradle",id:"run-with-gradle",level:2},{value:"Run with Intelij Run Config",id:"run-with-intelij-run-config",level:2}],u={toc:c},s="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"spring-state-machine"},"Spring State Machine"),(0,a.kt)("p",null,"This section explains how to generate source code for the spring state machine framework and how to use it for a\nproject."),(0,a.kt)("h2",{id:"run-with-gradle"},"Run with Gradle"),(0,a.kt)("p",null,"To run the Spring State Machine Generator execute the following gradle task:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew generateForSpringStateMachine \n")),(0,a.kt)("p",null,"Optionally you can provide the following properties:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"in")),(0,a.kt)("td",{parentName:"tr",align:null},"The path to the input file"),(0,a.kt)("td",{parentName:"tr",align:null},'"/src/main/resources/spec/opensm.json"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"g")),(0,a.kt)("td",{parentName:"tr",align:null},"The generator to be used"),(0,a.kt)("td",{parentName:"tr",align:null},'"java-spring"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"pn")),(0,a.kt)("td",{parentName:"tr",align:null},"The name of the project"),(0,a.kt)("td",{parentName:"tr",align:null},'"spring-open-statemachine"')))),(0,a.kt)("p",null,"These properties can be overridden when running the Gradle task from the command line using the ",(0,a.kt)("inlineCode",{parentName:"p"},"-P")," option, like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew generateForSpringStateMachine -PinputPath=new_input_path -Pgenerator=new_generator -PprojectName=new_project_name\n")),(0,a.kt)("p",null,"Replace ",(0,a.kt)("inlineCode",{parentName:"p"},"new_input_path"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"new_generator"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"new_project_name")," with your actual new arguments."),(0,a.kt)("h2",{id:"run-with-intelij-run-config"},"Run with Intelij Run Config"),(0,a.kt)("p",null,"If you use Intelij you are able to import this project. After successfully importing it you may run the ",(0,a.kt)("strong",{parentName:"p"},"Open CMD Java\nSpring")," run config.\nOptionally you may adjust parameters by editing the run config itself. You may change the following properties"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"in")),(0,a.kt)("td",{parentName:"tr",align:null},"The path to the input file"),(0,a.kt)("td",{parentName:"tr",align:null},'"/Users/robin/Documents/GitHub/ip8-codegenerator-analyse/src/main/resources/spec/opensm.json"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"g")),(0,a.kt)("td",{parentName:"tr",align:null},"The generator to be used"),(0,a.kt)("td",{parentName:"tr",align:null},'"java-spring"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"pn")),(0,a.kt)("td",{parentName:"tr",align:null},"The name of the project"),(0,a.kt)("td",{parentName:"tr",align:null},'"spring-open-statemachine"')))))}m.isMDXComponent=!0}}]);